version: '3.8'

services:
  master:
#    image: postgres:14-alpine
    "build": {
      "dockerfile": "Dockerfile_master"
    }
    container_name: master
#    user: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGOPTIONS: "-c postgres.slave.user=${POSTGRES_SLAVE_USER} -c postgres.slave.password=${POSTGRES_SLAVE_PASSWORD}"
    command: |
      postgres 
      -c wal_level=replica 
      -c max_wal_senders=10 
      -c max_replication_slots=10
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/certs/server.crt
      -c ssl_key_file=/var/lib/postgresql/certs/server.key
      -c ssl_ca_file=/var/lib/postgresql/certs/ca.crt
      -c log_connections=on
      -c log_disconnections=on
      -c log_statement=all

    volumes:
      - ./certs/master:/var/lib/postgresql/certs_export
      - master_data:/var/lib/postgresql/data



  slave:
    "build": {
      "dockerfile": "Dockerfile_slave"
    }
    container_name: slave
    user: postgres
    restart: always
    ports:
      - "5433:5432"
    environment:
      PGUSER: ${POSTGRES_SLAVE_USER}
      PGPASSWORD: ${POSTGRES_SLAVE_PASSWORD}
    command: |
      bash -c "
      if [ ! -d /var/lib/postgresql/data ] || [ ! \"\$(ls -A /var/lib/postgresql/data)\" ];  
      then
        echo 'Initializing replica...'
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=master --port=5432
        do
          echo 'Waiting for primary to connect...'
          sleep 1s
        done
        echo 'Backup done, starting replica...'
        chmod 0700 /var/lib/postgresql/data      
      fi
      cp -r /var/lib/postgresql/certs/* /var/lib/postgresql/certs_export/
      
      
      # add SSL in postgresql.auto.conf
      echo \"ssl=on\" >> /var/lib/postgresql/data/postgresql.auto.conf
      echo \"ssl_cert_file='/var/lib/postgresql/certs/server.crt'\" >> /var/lib/postgresql/data/postgresql.auto.conf
      echo \"ssl_key_file='/var/lib/postgresql/certs/server.key'\" >> /var/lib/postgresql/data/postgresql.auto.conf
      echo \"ssl_ca_file='/var/lib/postgresql/certs/ca.crt'\" >> /var/lib/postgresql/data/postgresql.auto.conf
      
      # add connection log in postgresql.conf
      echo \"log_connections=on\" >> /var/lib/postgresql/data/postgresql.conf
      echo \"log_disconnections=on\" >> /var/lib/postgresql/data/postgresql.conf
      echo \"log_statement=all\" >> /var/lib/postgresql/data/postgresql.conf
      
      postgres
      "
    depends_on:
      - master
    volumes:
      - ./certs/slave:/var/lib/postgresql/certs_export

  backup:
    "build": {
      "dockerfile": "Dockerfile_backup"
    }
    container_name: backup
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./backups:/backups
    entrypoint: ["/bin/sh", "-c", "crond -f -d 8"]



volumes:
  master_data:


#    command: |
#      bash -c "
#      until pg_basebackup -h master -D /var/lib/postgresql/data -U ${POSTGRES_REPLICATION_USER} -Fp -Xs -P -R
#      do
#      echo 'Waiting for primary to connect...'
#      sleep 1
#      done

#      postgres
#      "